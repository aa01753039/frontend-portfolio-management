/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutVacantesImport } from './routes/_layout/vacantes'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutRysImport } from './routes/_layout/rys'
import { Route as LayoutMiefectividadImport } from './routes/_layout/mi_efectividad'
import { Route as LayoutGlossaryImport } from './routes/_layout/glossary'
import { Route as LayoutGeneralImport } from './routes/_layout/general'
import { Route as LayoutEfectividadreclutadorImport } from './routes/_layout/efectividad_reclutador'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutPosicionIdImport } from './routes/_layout/posicion/$id'

// Create/Update Routes

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutVacantesRoute = LayoutVacantesImport.update({
  path: '/vacantes',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRysRoute = LayoutRysImport.update({
  path: '/rys',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutMiefectividadRoute = LayoutMiefectividadImport.update({
  path: '/mi_efectividad',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutGlossaryRoute = LayoutGlossaryImport.update({
  path: '/glossary',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutGeneralRoute = LayoutGeneralImport.update({
  path: '/general',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutEfectividadreclutadorRoute =
  LayoutEfectividadreclutadorImport.update({
    path: '/efectividad_reclutador',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPosicionIdRoute = LayoutPosicionIdImport.update({
  path: '/posicion/$id',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/efectividad_reclutador': {
      preLoaderRoute: typeof LayoutEfectividadreclutadorImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/general': {
      preLoaderRoute: typeof LayoutGeneralImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/glossary': {
      preLoaderRoute: typeof LayoutGlossaryImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/mi_efectividad': {
      preLoaderRoute: typeof LayoutMiefectividadImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/rys': {
      preLoaderRoute: typeof LayoutRysImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/vacantes': {
      preLoaderRoute: typeof LayoutVacantesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/posicion/$id': {
      preLoaderRoute: typeof LayoutPosicionIdImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAdminRoute,
    LayoutEfectividadreclutadorRoute,
    LayoutGeneralRoute,
    LayoutGlossaryRoute,
    LayoutMiefectividadRoute,
    LayoutRysRoute,
    LayoutSettingsRoute,
    LayoutVacantesRoute,
    LayoutIndexRoute,
    LayoutPosicionIdRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
])

/* prettier-ignore-end */
